
Welcome to this new lecture of the mobile security course. Today, we're going to use the concept of threat model as well as of security vulnerability. In the previous lecture, we discussed about the possible malicious behavior that a malware can perform in order to damage a victim user. In this lecture, we're going to introduce how an attacker can achieve such goal and how it can bypass she can bypass security protections. Basically, what we are going to introduce are security vulnerabilities.

So the security vulnerabilities are the way are the text of face that is exploit that are exploited by the attacker in order to complete an attack. The first question that we have to address is what is a security vulnerability? Security vulnerability can be defined as a weakness that is exploited by an attack in order to perform and complete an attack against the victim, and it was not supposed to be there, but that on the other side introduces possible, allows the the attacker to introduce possible negative security repercussions. It is important to remember that not all the vulnerabilities are the same, but they are classified according, for example, to the impact, to the damage that it may cause or to the, easiness that, through which the attacker can complete them. So the, skill that we're going to that you we are going to achieve through this lecture is basically how to how to classify the, vulnerabilities according to, to set the features and properties, and basically, how we can identify and determine their severity.

So, some possible example could be the following ones. We should be, for example, be threatened by a certain vulnerability x, but not by the vulnerability y. We should be we should not be threatened by vulnerability zed our core as long as some properties peak, are guaranteed. Or users, certain type of users, type a, for example, should be threatened by vulnerability x, but users of type b should not be, should not care about this vulnerability. So everything revolves around the definition of the threat model.

So in order to be able to classify the severity of vulnerability, we have to classify we have to define the threat model. The threat model is basically the set of properties and features that in capabilities that an attacker comes with. So the set of, actions that she can or cannot do. 2 important information. The weaker requirements are always included.

The stronger requirements are always excluded. Some examples, an attacker can run, install, and malicious app as root. If an attacker can install the malicious app as root, so with root images, we can, of course, assume that it can get all the permissions. So those are the, so those are implicitly included. On the other side, we can assume that the attacker cannot run-in the trusted execution environment, which is a completely protected, area of the of the device itself.

So running as a with root privileges means that the attacker can get all permissions, but on the other side, it can get access to the trusted execution environment. The effect model is extremely important. We don't define the threat model. We're not able to talk, about, about the tax and defense mechanisms because the nothing makes sense. So only under a specific with respect to a specific threat model, the attack an attack can make sense because, otherwise, it could be trivial or even impossible, and only under specific threat model, a defense mechanism makes sense because otherwise it could be completely useless or safe.

So let's assume the following set model. I can write out different files assuming I have code execution as a third party app. This is, an interesting attack because the attacker shouldn't be able to do that. So if the assumption is that an app the attacker is able to install a third party app, on, on the victim device, it is, it is, let's say, not possible that the attack in a standard scenario, it couldn't be possible for the attacker to write arbitrary files, so just having code execution capabilities and running as a third party app. So that means that the attacker has been able to security vulnerability that has led to the to the following scenario.

So that is interesting. On the other side, if the, threat model is the follow and the attack is the following one, I can write arbitrary files assuming I have for taxes. This is definitely not interesting because, of course, if the attacker comes with root privileges, it can write arbitrary file whenever she wants. And so this is a useless attack. So what is our goal today in this lecture?

We have somehow to collect and to gain that kind of knowledge that allows us to judge if an attack is useful and worth being studied, both in terms of implementing design, and in terms of providing a possible defense mechanism. So, the general rule approach is the following one. If you assume a third model, if under a by assuming a specific model, you gain some knowledge that you, already knew, then the attack is completely useless. For example, if I assume, assuming a root attacker, I can read private app files. This is useless because we know already that if the attacker comes with root privileges, he can read, she can read all the, private information that, are embedded within the private directory of the apps.

On the other side, if the attacker is, for example, without privileges, but just as a third party app, an attacker can read the, private app files, then it could be an interesting scenario. Of course, this, cybersecurity area is not, it doesn't come with strong rules and guidelines. Everything comes with the with the experience. So what we're going to introduce here is a set of concepts and knowledge that researchers as well as, experts has gained all over have gained all over the past few years, and that can be collecting this set of slides. But, as always, what you have to achieve is to, to gain that kind of knowledge and that kind of capability to judge yourself whether an attack is worth or not.

So even in this in this case, there might there might be exceptions. So for example, if a new attack comes also with a new technique, then it could be interesting. Better saying, if we something that we already knew is possible through a different market, then it could be an interesting possible a possible interesting attack. Or if something new is cons conceptually possible, but practically tricky, then it could be, also another possible example of an interesting attack. So there are let's say this the same, discussion applies for both attacks and also for, the defense mechanism.

So if we assume that the attacker comes with, root privileges, this means that the sandbox is useless. So the take home message that we have to keep in mind is that the defense mechanisms protections cannot be effective against any kind of threat. But, usually, they provide a defense mechanism against the 3rd models that are more frequent, that are more frequent. So the, let's say, the situation between the the defender and the attacker is a sort of never ending grace. So whenever the defender provides a defense mechanism, the attacker will provide it to will try to bypass it, and this basically will never ends.

So the defense mechanism, can be successful with respect to a specific attacker that comes with a specific capabilities. In other words, with respect to a specific effect model. With respect to the previous example, so, an attacker that comes with root capabilities, with respect if we consider an attacker that comes with root capabilities, the sandbox is useless. We can assume that the general message or, the general reference model is that if a defense does not restrict anything an attacker could do without it, and in any scenario, then is useless. Let's assume another example.

Let's consider another example. One possible defense mechanism could be that we want to protect. So our world could be to, protect private files, and we try to do this by, for example, encrypting the files and saving, the key within Yap itself. Well, in this case, if there's some it is completely useless because if the attacker has access to the encrypted files, it means that it will also have access to the key, so it can, decrypt the files. On the other side, if the attacker doesn't have access to the, to the encrypted files, then he wouldn't have access to the unencrypted files as well.

So the defense is completely useless in this case. There are some exceptions, of course. So an important consideration or mention is, needs to be done towards what is called defense in-depth. Defense in-depth is a set of similar security boundaries or security protections that can, seem to be similar in their purpose in their goal, but they provide different defense mechanism with respect to the capabilities of the packer. An example, the absolute boxing and the policies are 2 different protection mechanisms provided by the another pity system that, however, seems to be redundant, but that at the end of the day, they are useful because they implement different techniques.

So it's less likely to find a bucket that can affect both. So the idea of the defense in-depth is that even though you try to achieve the same goal, you provide 7, 2 different mechanisms. You keep all of them active at the same time so that you can reduce the, let's say you prevent having a single point of failure. So the idea is that if you have a single protection, a single defense, and that defense comes with an issue, then the attacker can complete the attack. Well, if you have several defenses that try to achieve the single 3 different approaches, then, even though one of them comes with a vulnerability or it's not perfect, you can still rely on all the other ones.

So that's the idea of the defense of the defense in-depth. So as I said, the threat models nowadays, there are several threat model nowadays that can be considered as useful or specifically common. Generally speaking, if a threat model describes a frequent scenario, then it it means that it is useful. So, if you, for example, you assume that your attacks work your attack works only if the attacker comes with the router privileges on the device. And for example, the, username on the device is.

This means that you're studying a very super specific scenario. So from the community, it's not very interesting to study such kind of attack. On the other side, another example could be that, if in the threat model, you assume that the attacker comes with, the capability to write and modify the hardware of the device. That is a, definitely not reasonable assumption because it's not very common, not very reasonable, so the attack is not, interesting as well. As I said, models can be very different from each other, but there is a set of common models that nowadays are extremely, used and, well known.

For example, with respect to the malicious applications, the first step, the first set of requirements is the set of, permissions that the application should have. This means that we have to discuss whether the, application, the malicious, the malware comes with arbitrary permission, with specific permissions, or with 0 permissions. And, also, the type of permission is extremely important. So whether it is dangerous or normal, it could be affecting not only the risk, but also the capability of the attacker, to perform and complete his, her own attack. If you remember when we talk about, dangerous permissions, you have every time when application requests a dangerous permission, it has also to to wait for that permission to be granted by the, by the user himself.

So assuming that the malicious app comes on the evicting device with the specific permissions that, for example, could be even dangerous ones is a strong assumption. It's not unfeasible, but it's the strong assumption because you assume that not only the victim is still somewhere, on the device, but also that the victim is, giving access or is granting permissions to the to the, management application itself. So that is making the attacker not impossible, but harder than, other scenarios. So as I said, there are, nowadays a set of possible models. We're going to provide, and discuss here some of them.

For example, the attacker, one possible scenario could be that the attacker knows the phone number of the victim. In this case, the attacker can, send us SMS, text messages, or even phone calls. Another assumption is that or third model is that the attacker knows, or somehow manages the manages to, lure the victim to access to an arbitrary URL. This cannot cause, for example, by assuming that an application, interacts or has HTTP traffic. So in that case, the traffic can be somehow, modified or, so that the maybe the the traffic is redirected towards something else, or, the the user, the victim is lured by clicking on a on a link.

The URL in that case could be a malicious one, a malicious website that tries to exploit the, for example, the bugs in the web browsers. And this could be the set of possible attacks when a victim eventually visits someone visits issues and, arbitrary URL. Another common set model is that the one that considers the attacker within the same network as the victim. In that, of course, a different set of, attacks can be performed. For example, the man in the middle attack.

So the attacker can be in the middle of the in the center of the communication, in the middle of the communication between the mobile device of the victim and, for example, remote server, and he can intercept the traffic. He can sneak the traffic, is is drop it, and eventually modify it according to the specific, traffic itself. If traffic, it can be modified. If for example, it can somehow modify the, like, the the content that is, retrieved by the victim and, eventually download some malicious, client client code that is rendered on the mobile device side and eventually inject malicious, payload there. Moving on, another common set model is the one that considers an attacker that can that is able to run code as a previous user, so as a root or or as a system.

Eventually, like, higher, an attacker that comes with higher capabilities, the one that is able to run code in the kernel or even in a trusted application, which is, which means, an application that comes with additional but still in the user space or even further in the that is able to access to the trusted execution environment. Another possible reasonable model is, an attacker that that can has that can have a physical access to the device. In this case, the attacker, for example, can interact with the physical device. It can she can connect the device through, a USB cable. It she can perform some NFC, transactions or even tamper with the hardware of the device itself.

So according to the, so this is just a list of possible common threat models, but as I said, of course, there are several other ones that have been presented in the literature and that, or even new ones that you wanted to discover and that you, define on your own. The important and the take off message is that every time you have to keep in mind what are the capabilities of the packer. Moving on, let's say that, one possible classification, which is nowadays pretty standard is, the following one. So, the threat mode in the third model, we we usually have 3 different types of attacker, and one attacker, approximate attacker, and the local attacker. According to the location of the attacker with respect to the victim, the set of attacks and capabilities are also, of course, different.

So in the case of a remote attacker, it means that the attacker doesn't, is not able to interact with the victim, and it can just rely on, remote resources that the dev team can eventually access to. For example, it can do the wiki to access to some malicious web pages or to read an email or to receive an SMS. In in the case of a proximal attacker, the attacker comes closer to the victim. And when I say closer, it means from a physical point of view. So in this case, since it is, since the attacker can be, in a nearby, you know, could be physically nearby the the victim.

He can also she can also rely, on, other techniques and protocols, such as, for example, the Wi Fi, the Bluetooth, eventually, even the NFC. In the case of the local attack instead, we are assuming that the attacker is able to make the to install and, and malicious, and on the on the victim device or to run some code on the victim device. Eventually, he can also have physical access to the device itself. So according to the, 3rd model, that we define, we will also define the attacks the possible attack surfaces. So an attack surface is basically, all the set of points that an attacker can exploit in order to perform, his own attack, which could be, for example, and then as I said, an entry point through which he can enter or extract the data from a specific environment.

For example, if we assume that we have a remote attacker, the remote attacker cannot use, cannot run a specific cannot run code on the on the victim device. So he she, she has to rely on specific, resources, as I said, on Maisha's web page or, an email or something else that eventually is eventually accessed by the victim itself. So, let's stop for one moment and try to think about why the attackers are definitely are so much interested in the vulnerabilities. Well, basically, because the, if we consider the third model and the assumptions, and if we consider on the other side what the attacker wants to do, the vulnerabilities are basically the ones that allow to fill this gap. So in a properly designed, components, either software or harder one, the protection mechanisms should prevent the attacker from, an attacker that comes with specific capabilities from performing specific actions.

The security vulnerabilities are actually the one that is that break these, set of rules and allow the attacker to perform the to complete the package she wants to to do. So it basically means that attacker can move from one possible threat model towards a different pattern. So this is the, threat model. The let's say the definition of threat model. According to the threat model, as I said, we can discuss about the, we can by considering the model, we can also, we can afterwards identify and determine the severity of a vulnerability.

So the severity of a vulnerability is given by 2 different information, the type of vulnerability and the location of the vulnerability. So the type of vulnerability means which kind of bugs are we talking about. So, there are several different types of, categories that have been, identified all over the all over the past few years, and that we are going to briefly mention here. The first type is elevation of privilege. Elevation of privilege could be, for example, an attacker that, is able to install an application, with the 3rd party app, with the 3rd party privileges.

And within that application, attacker manages to run some code that, comes with root privileges. So an additional privilege means that from a lower set of privileges, the attacker manages to gain higher set of privileges. This could be from a third party app towards a root application. It could be, for example, again, within a sandbox applicate within the the sandbox of an application, which means also running with a third party app privileges. The application can gain an additional privilege if, it can, for example, write arbitrary fines.

If we assume that an application or some code shared by the attacker is executed with those privileges, so this is the starting point, In innovation of privilege, of course, if the attacker is able to run code that is, executed in the trusted execution environment. So another example could be, that an attacker that at first comes as a remote attacker eventually becomes a local attacker. So elevation of means that, from lower privileges, the attacker manages to find or to gain higher privileges. Another common type of vulnerabilities is the remote code execution. Remote code execution, means that the attacker can, somehow, manage can manage to, have some code downloaded and run on the victim device.

So this could occur, for example, by visiting by luring the victim to visit our malicious web page or to receive SMS that can trigger the code. The some issues could be downloaded and then eventually executed. The code execution itself could be constrained, but it is a super powerful, step. Another possible type could be information disclosure. The information disclosure, basically refers to the privacy, to the privacy of of the victim itself.

So the vulnerability in this case, allows to leak some sensitive data from the user. For example, photos or sensitive data that are stored on the on the memory and so forth. And, eventually, it could be it could be also seen as a sub subcategory of division of privilege attack. Another one is the denial of service, which by this, by definition, the refers to the set of attacks that make our source unavailable. In this case, let's say that the the the impact of the denial of this attack, it can be different.

For example, attacker can perform a aDoS attack, when it manages to she manages to crash to make a component crash, or, she forces the device to be rebooted, or she breaks the device, which means that the device cannot be used anymore. Even within the denial of service attack, we can have several types, several, severities within the DOS attack itself. So for example, denial, of service attack, it could be a permanent one. So the device is break then. It could be, an attacker that that requires a refreshing of the operating system or that even requires a factory reset or just the reboot of the device.

So it could have a different impact according to, to the specific set model that we're considering. As I said, the severity of vulnerability comes as a sort of product of the type and of the location of the vulnerability itself. So the the first information that we need to identify is the type of vulnerability. The second information that we have to identify is the location. So which soft software or hardware component is basically affected by such, by such vulnerability?

So, the vulnerability can be, according to the location, the vulnerability can have different severities. So it could, for example, allow for previous code execution. It could be easier to to be reached and so forth. So some some example, when we talk about the security vulnerabilities are, whether the vulnerability is, for example, in the Android framework or in the Android operating system, in general kernel, in the, in the trusted execution environment, and so forth, in a system application or in a third party app and so forth. Considering, again, the location, the, we have to identify also what is the process where the availability is running, and that is also extremely impactful and important for the Android ecosystem.

So in in another scenario, we can have different type of types of processes. We can have constraint processes. So, processes that have even fewer limitations, fewer, sorry, privileges with respect to the traditional third party apps. We can have unlimited process, so just a third party app. We can have process like a system app or even trusted computing base.

For example, the, components and processes that run-in the candidate are responsible for loading some candidate components or several other, stuff. We can have the bootloader, which is the one responsible for loading the another image. We can have the trusted execution environment. So, the location is extremely important because, the location determines not only the reachability of the vulnerability itself, but on the other side, also the impact of that vulnerability. So once again, this is information that we have to keep in mind, always keep in mind.

About the location, we have to think about what is a component that is affected by the Vargas. So for example, if it is a previous component that, of course, the impact would be higher, and what is a part of that component that, embeds the bug itself. So this, of course, affects the way the reachability of the of the, vulnerability itself. So if the attacker can able is able to, to reach that specific component, it means that it can also reach that vulnerability and eventually complete an attack. If not, it means that the itself is useless because it's not it's never reachable.

So if we consider the product of, as I said, the the type and the location of the vulnerability, then we can determine the severity of the vulnerability itself. Basically, the, the question that you have to, to answer every time with familiarity is how easy is to exploit and how much powerful it is. Exploitation nothing means nothing more than, basically relying on the specific vulnerability, to perform, some malicious behavior. So the exploitation of vulnerability means that the attacker has identified the possible attack surface and that it exploits she exploits it in order to complete the malicious action. Again, there are some constraints and requirements, so some vulnerabilities can be exploited only by specific attackers.

So, there are some vulnerabilities that are significant for, for example, for the local attacker, and there are some others that are not. So once again, we have to identify, the the threat model. So the threat model defines which type of attackers can exploit which kind of vulnerabilities. As I said, starting point is the threat model, and only after that, we can determine we can discuss about possible attacks and possible defense mechanisms, and we can definitely determine the severity of a vulnerability itself. So the severity is given by this multiplication.

We have the, ease of exploitation and the damage. Ease of exploitation means, how hard which type how hard of a, how hard is for an attacker to reach that vulnerability to exploit it, or in other words, which kind of attacker is able to achieve, to to to exploit that vulnerability. The damage means, the the impact of the vulnerability itself. And, again, it also depends from a specific, victim that we are going to to consider. So, possible examples could be, like, the the binding between the vulnerability and the victim could be, for example, if the vulnerability is to steal my personal email, then nobody might care.

If vulnerability is to steal emails of a politician, that could be, significant. So, when we determine visibility, it means that we're basically giving a score to the vulnerability itself, and that is what Google does for each bug or vulnerability that is found. The classification is the following one. We have low, moderate, high, and critical, and, the score is assigned, as we said, according to different informations. So the type of bug, so, whether the what attack what the attacker can achieve with that kind of bug, what component is affected, and also what is the condition, under which it can be exploited.

According to the severity, Google, considers, so according to the severity, Google can decide whether to, to fix that vulnerability immediately or or or not. So whenever you, whenever a new vulnerability is identified, a score is assigned to it, and then Google, calculates, also the risk and, determines determines the priority with which the vulnerability should be fixed. The, let's say, the possible, different severity scores that can be assigned are multiple ones. It's severity can be assigned to each combination of, the relevant aspect. So you can eventually look into the set of, vulnerabilities provided by the Enloid ecosystem.

But, if you want to be more generic, you can also give a look at the common vulnerabilities scoring system, which is a reference, for everyone that gives a number between 0 and 10. And then there are several metrics that eventually allow to identify what is the, severity score for vulnerabilities in particular. So, sometimes we can also, we might find a situation where several vulnerabilities are chained, among each other. So, for example, an attack is, the definition of different vulnerabilities that are exploited altogether. One famous example was the following one, chase spotting, where we had the in different bugs all over 6 applications.

And at the end of the day, in the attacker, it was performed by the attacker was, the following one. So an attacker can remote attacker, was able to install and run arbitrary APK files by exploiting these 11 bugs. So the vulnerabilities are not only, let's say, single point of failure, but they can also provide, different they can also be combined and provide the new possible, attacks. How can we be aligned in terms of vulnerability tracking? So the vulnerabilities are everyday discovered, everyday reporting, and maybe as, hopefully, everyday fix.

There are different resources when, when we talk about vulnerability tracking according to the target ecosystem, you have a different, let's say, a different, resource to be to be to be considered. When we, let's say we need the 2 when we refer to vulnerability tracking, what we need to do is, to basically have enough information in order to, be able to refer to that vulnerability, to describe how that vulnerability works and how it has been fixed, and also to distinguish, between most similar vulnerabilities. So when I read tracking, at the end of the day, comes with the following system that is called the common vulnerabilities and exposures. So, this is a standard worldwide adopted, system for tracking the vulnerabilities, better seeing a CV. So every bug, every vulnerability is assigned a CVE, and there is a specific format that is the following one.

So CVE, year, and ID. So, the year is, eventually the year where it has been fine found, and the idea is just assigned afterwards. As I said, there are some of that the basic can be, accessed. So the ones linked here is a general one, but specifically, talking about the entire ecosystem, what you have to refer to is what is called the Android, the Android validates. So the validates are, a collection of of the vulnerabilities that have been fixed within the car, the current month.

So every month, Google releases a new announces a new balloting, and it contains which contains the vulnerabilities that have been, fixed. They usually, specify the CV, the type of vulnerability, the component that, it affects as well as the stability and eventually threat models and attack vectors. This is, just a brief overview about how the, what are what are the the information that we have to keep in mind when we talk about the security vulnerabilities and most important, what is a threat model and why we need to, to to define it before discussing about vulnerabilities.