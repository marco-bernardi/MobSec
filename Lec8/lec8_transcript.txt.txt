
Welcome everyone to this new lecture of the mobile security course. Today, we're gonna introduce Android malware. First of all, the term malware comes from the contraction of 2 different words that are malicious and software. So generally speaking, we can say that a malware is a software component that is aimed to perform a malicious action no matter whether it is, whether the software component is in another application or, a generic binary binary file. Of course, in this course and in this scenario, we're going to introduce malwares that are part of the Android ecosystem, which means that they, are specifically designed to exploit some features of this ecosystem as well as to perform some specific attacks.

So when, right now, in this lecture, what we are going to talk about is basically, an overview of the different examples of malwares over the history of the Android ecosystem and, how can the malware actually be installed and which attack surfaces they can exploit. In the future lectures, we're going to see more specifically which vulnerabilities are used by the malwares in order to perform the attacks. Right now, we are just going to introduce some examples and to see how they were able to be successful. So the first question is, why does malware exist? Of course, we are already assuming here that malware malware still exist.

This is definitely true if you check out mostly every day, the Google Google has to remove from the play from the Google Play Store, which is the official market, several malwares, which are detected afterwards. Even though when you whenever you publish an application on the Google Play Store, there are several static both static and dynamic analysis techniques that are performed in order to prevent the publication of malwares. Despite the efforts, the malware nowadays are still, still exist, and they still, able to bypass the the defense mechanisms that are provided on the Google Play Store. So so they managed to be published. So they are actually published on the Play Store and eventually downloaded by the users.

Assuming that the malware exists, which is kind of a real assumption, we can think about why. What is the motivation for a malicious developer to write a malware? Well, there are several possible, motivations, which can be somehow, assume reassumed or, summarized in this, valid list. Just for fun, for money, or because we have a specific possible attack. So just for fun means that, for example, the user, the malicious developer just wants to make, you know, a lure or, just a trick against a specific, against a specific user.

So it doesn't really have any big motivation, so it's just for fun. Or it can have, for example, you can want to he or she wants to to perform some damage against a specific user, but, this is could be, for example, one of our friends or something that we do not really like. But, again, there is no, like, monetization behind this action. There is no political choice or nothing that is bigger than just, you know, malicious behavior of against one of our, neighbors or something like that. And, it could be of of course affecting any kind of, sensitive information.

So it could be, for example, the stealing or sensitive information of the target user, or it could be the, say, the set of, the set of tools or the set of for for sample, show social networks or several other, tools that the user itself, which is the target, which is the victim of the attack can rely on. So generally speaking, the first motivation is just for fun, just to make some, you know, some noise and, disrupt the victim. The second motivation is actually much more significant because, the malware can, eventually the the malicious developers that develop the malware can eventually get out of money out of these kind of attacks. So, this is also the case that is more, of course, more often. So the the attackers can, for example, develop a a ransomware in order to ask for money to the victim, or, they can still send the private private information, and they can, sell them, for example, in the dark web or, in other scenarios.

And they can ask for they can ask the victim for some money. So the monetization is definitely one of the most, important, motivations that can bring or that can push the developers into writing a malware. As I said, information stealing is one example or ransomware or, for example, advertisement. We we are going to see how does the advertisement framework nowadays, works, which is the general scenario and idea between be behind the advertisement and how a malicious developer can eventually exploit it. Bitcoin mining, this is not, nowadays, so significant.

It has been significant, over the past few years. So, there were some examples of malicious apps that were installed by the users and that were actually running a Bitcoin mining activity in the background without notifying the user. And, there could be other scenarios, like sending premium premium SMS and so forth. The 3rd possible motivation that can, push a malicious developer could be to target a specific person. So in this case, for example, it could be, a political or a very famous person and you want to or maybe something that is crucial for your life, for example, your boss or someone else in your, city or in your country, and you eventually want to target that specific person.

So in that case, the attacker is very crafted, according to the target individual, and, it really depends from the different scenarios. So, the amount of time it is also spent against in order to perform this kind of attack is quite significant because, as I said, it is it has to be highly customized according to, address the specific person. Considering this has possible motivations for malicious developers, we, have to think about what is the real action performed by an hour and why it is performed. So let's say that, overall, the purpose of this lecture is to give you some knowledge about, malware and, more specifically, malware that, concern the that are that have been published in the mobile ecosystem in order to not only to be, more aware about the topic. So, at first, as our mobile users to be, more concerned about the topic and also be aware of the possible risk, but also maybe to eventually, try to to do something in this scenario, which could be, for example, working in a malware detection project, which, aims to improve the current techniques that we rely on for identifying the malwares.

So first of all, like, the motivation could be one of the previous one that we have discussed. We, right now, would like to think about or to get to have an overview about what a malware can actually do. And in order to, provide you some in order to provide you some examples, I will mention from right now, several real examples of malwares that have been developed and found over the past few years. So starting from the, like, one of the first ones released in 2004, we're talking about malware, sir. In this case, the malware that was not even, developed for smartphones, because as you can see on the right, you have a picture of a Nokia phone.

And you might also, remember that the first smartphones were released, in 2,007 and in 2,008, from iOS and, from Apple and Google, respectively. So the malware belonging to the mobile ecosystem were even out there before the, let's say, the publication or the release of the first smartphones. Because because, of course, we already had the, mobile devices even though they came with the different features from the smartphones nowadays, but still the, let's say, the the malware, developers were already out there. So, the first the very first malware is this example, Kebir. It was released in 2004.

It targeted the OS, and it was just pretty much annoying. So the first examples of malwares were mainly designed to be really annoying. Then over the years, the, the malicious developers, the attackers started to be, let's say, even more, good at the development of the Malware's and also were pushed by different motivations. So right now, the point was just to be annoying, with respect to the victim. So this in this example, the malware was just showing a pop up message.

And what we have to take take care of is the way it could have been propagated. So in the very first, mobile devices, if you remember, we did not we did did not have, Internet connection. So in that case, the attack vector should have been, something else than Internet connection. And, in fact, this kind of malware was propagated through the Bluetooth communication channel. Similarly, in, again, in 2004, there was another malware called the SCAL, which was even more annoying in this case because it was not just a pop up message, but it used to, to replace all the icons in the in the phone, like in the picture that you see on the on the right, barely making the usage of the phone itself, useless because the user was not any more able to identify and to distinguish between the apps and to identify the right one to be, executed.

It also corrupted some files, like, SMS, web browsing, and camera. And, yeah. This was the main point. Moving on, as I said, when, we had the first, like, after the publication of the first smartphones, the, the attackers had also to figure out how to exploit a new set of attack vectors in order to release and distribute the malware. And the very first malware that was detected on let's say, one of the first malware that were detected under the platform was this one, plankton in 2011.

And it was basically, designed for, leaking user private information, which are, of course, the standard ones, like, the contact list, the, web browsing, the bookmarks, and, and so forth. And the motivation was, of course, monetization because when you as soon as you manage to get product information from the user, you can then sell them you can sell this kind of information, anywhere else. And you can eventually ask the user to, to pay, to get paid in order to prevent the release of such information. Again, in 2011, we have this droid kung fu, another application, other malware that was published on the Play Store, which was a bit which was a little bit more, complex in terms of, more sophisticated in terms of aims and also design. As a matter of fact, it allowed it to to gain, root privileges or, root privileges over the target device.

And it has this bot like a, which means that it could be propagated to other, devices that were near near around. Again, the modification was the main motivation. So the the point was that, once, the the malware, was able to get installed on a single device, it could then be propagated to several others. And then the attacker was able to, get money from the several victims. So, it could, for example, perform coordinated tasks, such as denial, disability denial service attack against the, remote, service or remote resource.

Or it can, send spam data or steal data request and so forth. What we have, to really, let's say, think about or to reason a little bit is that when we talk about malware, we have several, actors that play in this scenario. So talking about the malware author doesn't mean that we are talking about the malware user. So the first role that we have to think about is, who actually develops the malware itself, which is called, we can say, the developer. So this is the person that is responsible for developing the logic of the malware itself.

Then we have someone, someone else that triggers the infection. And in this case, it could be someone that has to choose which approach, it can be used for distributing the malware and to infect the users. So for example, it could be like, a bot, so that the malware installed on a device can be propagated to several others through different channels, like through, for example, as an attachment of an email or by exploiting the Bluetooth communication channel and so forth. So the first act of this developer. The second one is the the person responsible for the distribution for the infection.

The third one is the, what is called the operator, which means, the the person that actually makes the malware executing or completing a specific task. So that triggers the execution of the malware itself. And then we have, the action performed by the malware, which is decided or defined by someone else, which could be the customer. So, for example, the purpose of malware could be to, as I said, for example, to steal sensitive information or to perform, internal service attack and so forth. So all these roles, so the developer, the infector, the operator, and the customer can be, different people or can be also the same person according to the to the scenario.

But, very likely, we have different roles according associated to different people involved in this, in this situation. So, it doesn't really matter. So if the developer developer, for example, could, might get paid for developing a malicious software for someone else that decides, how the software can be distributed or for even some someone other that decides what should be the final action the final goal of the malware itself. Moving on with the list of the examples of malware, we can cite these zigmo, which was, pretty, let's say, pretty smart in its design because the purpose of this Zeus, Zeus in the mobile malware was basically to, to bypass the 2 factor authentication procedure, that involved the usage of a third party, device, which means, for example, mobile device. So let's say that the use case scenario, the target scenario addressed by this malware was to be able to, get, to steal the credentials for, steal the victim credentials for logging into, for example, the Bank of America website, which, was supposed to be, eventually entered by the by the user from the browser.

But as you see, as you might know, when you have the 2 factor authentication, whenever you try to log in to to our bot server with, for example, laptop or something like that, then you usually have, or even from the mobile device itself, you're going to get a code on your on your mobile phone number. So whenever the user whenever the victim was trying to access to the, Bank of America server, the, even though the Zios malware was installed on the victim device, There was no way at first for bypassing the authentication. But at the end, in this new scenario, in this new design, they managed to install a malicious app on the device of the on the victim device so that whenever there was an attempt to log in, the malware could, steal and, could steal the to factor the temporary the temporary code of the OTP and eventually send it back to the, corresponding information software installed on the, laptop. So the overall design is that in this case, the purpose of the malware was to bypass the authentication, on a sensitive, service, like, for example, a bank, bank account, by installing 2 different malvers on different devices and bypassing the 2 factor authentication procedure.

Then, once again, in 2,000 and 11, we had this example of, called the HIPAA SMS, which was, specifically targeting the, sending of premiums and premium numbers. Sorry. To to send the SMS to premium numbers. What does it mean? It means that, for example, you receive, it actually, works like this.

So you you receive, an SMS from, like, an unknown number. And this SMS has a link, for example, to, an an external resource, which you might eventually click on. And if you click, you could, for example, accept an offer or, you accept it to activate a specific, service, which means that you will be asked for pay, for this service afterwards. Another example, which was already mentioned, was about Bitcoin mining. And, this was actually detected in 2014 by, through an application called Bitcoin miner.

The idea of the of this, malware was pretty simple and effective. Because, basically, the, developers, identified a possible victim application. And, they basically took it and repack it. So it means that they they disassemble it, include, inject some malicious code, and then reassemble it in order to be distributed on the Play Store. So they, at the end of the day, they choose one application.

They disassemble it, and they just inject some stolen, code for mining activity, for mining, for performing a mining task in the background from somewhere else. And they inject such code in the application. As you can see from the number of downloads, the successful was the, attack was quite successful as they managed to install, as they managed to have the application installed by, a significant number of users. What is interesting here is that, basically, the effort made by the attacker was close to 0 because they called for the main task was taken somewhere else. The application was already there.

It was really famous. So they just need to, somehow to inject the malicious code inside the target application. So it was very, very successful and, without so much effort from the packer point of view. Another example, from 2016 was another, example of a malware that injected a lot of Google accounts because it once installed, it it managed to, steal some, tokens and, some authentication and, basically, to trigger the download and the installation of additional apps without the user content. One, important notice is that note is that it needed to, to get root privileges.

Moving on. As I said, you can, if you even right now, Google for possible examples of Android malware, you will see how many different examples of apps that are removed daily from the Google Play Store, just to mention a few. For example, there was a WhatsApp based, wearable Android malware that was published on the Play Store as well as, version of the Netflix application or, several other fraud apps, again, published on the Play Store. Another possible attack, vector or, say, or the off malware is the ransomware. This, of course, doesn't really belong, doesn't necessarily belong to the mobile ecosystem, but it also applies pretty well to the mobile ecosystem.

The idea is that when you have a ransomware, the purpose of the ransomware is to encrypt some sensitive data, and, ask the user to to pay for, getting this data back. So it can be applied on a laptop device, or it can be applied also on, of course, on a mobile device. And the, let's say the general strategy or the general approach is basically that the malware is, installed on the device. And, it encrypts some data, and then it tries to, to rely on some human behaviors. Like, for example, it tries to generate anxiety or, fear into the victims so that the victim is really forced into paying, the the attacker for getting back this on data.

So, generally speaking, this kind of, attack tries to also to, push, to put out of pressure, over the victims so that it, these chances of, getting paid there can be higher. So, for example, in this, just case that you can see on the right, there is a reference, for example, to, like, there is a notice from FBI that, seems to have, to have detected an access from your device to some pornographic material. And you might have get this. And the purpose of the ransomware is to show you this kind of message so that you are, threatened, and you have fear, and you are high highly encouraged to, to pay in order to to prevent the, this information for, from being disclosed. Another thing that, usually happens is, for example, included within the messages some, personal photos or eventually some, threats that could be, for example, to propagate, this information to the contact list or to, other people.

Another category of, malicious apps comes with the ones, which can be kind of, which are borderline applications, borderline. The reason for which I say that they are borderline is because of the scope. So when we speak about spyware apps, the purpose of such apps is to steal the, is to grab information from the activity of the user with the mobile device. It could be, for example, the list of phone calls, of messages, the chats, all this kind of stuff. And seeing that it's borderline because, for example, it could be used by, single individuals that, for example, want to, you know, to keep control of their partners, or, for example, of their children, or, several other people.

But it could also be, say, a situation where these kind of, malware are installed by governments in order to keep track of specific people, like, for example, journalists or politicians and so forth. Examples real examples of, this kind of malware, include, for example, Flexispy, which, as I said, as our standard spyware application was logging, was, let's say, keeping track of the calls, as well as the Facebook, WhatsApp, Skype, call logs and recordings, but also several other information, like, for example, the emails received, the kind of events, the locations, and the, scene, scene changer eventually, notification. It is not that, hard also to implement the key logger, which means that it is and now we're able to keep track of all the, data that you are providing input into the into the device or, even further to, get remote control of the camera so that it can take pictures whenever, it wants and so forth. This kind of malware required or requires some privileges. But, don't be scared because there is assistance.

There is support. You just have to pay, and there, he will be done for you. So as soon as you manage to get the the real device of the victim, it's just a matter to, pay the it's just a matter to pay the, like, the the company, and the company will do everything for you and install this malware on the target device. Another example was an Android RCS, which was, also very funny because, this was provided by an Italian company. It was designed as a a spyware app, and they eventually be, even they themselves, were hacked.

So their, emails were, leaked on a WikiLeaks. So they were able to, once again, to collect a lot of information, like, private conversations, GPS location, and so forth. And the the overall aim was pretty much the same as the previous one. Then, right now, we are going to introduce the, advertisement framework, and I, generally speaking, the advertisement scenario and, how this, scenario can be involved in a malicious context. So let's discuss about how the advertisement framework, frameworks work.

So, generally speaking, we are again talking about monetization. The issue with the advertisement is that whenever you, you are shown an advertisement, someone else is getting paid. So the purpose of the of the attacker in this case is to get some money through this kind of, framework. So let's first introduce to the overall AD ecosystem. We have, to consider different factors in this new ecosystem.

First of all, we have the developer of the application, and then we have the developer of the AD framework. So what happens is that, usually, if you have the application for free on, the Play Store, you know that you have, that the app comes with, some advertisements that are embedded. These advertisements are usually embedded, through a library, which is provided by the developer of the AD. And the application developer embeds this library within, his own his own app. So what happens is that, the, of course, the the framework, the framework, is, connected to our most server, which is the advertisement server brand, which purpose is to provide advertisements which need to be pushed on the on the mobile device.

So whenever the application runs, the advertisement library, retrieves the relevant, advertisements from the remote server and displays such advertisements to the user. Whenever the advertisements are shown to the user, both the app app developer and the developer of the of the advertisement framework are paid. Even more, like, what else could could be could it happen? So if the, if the user clicks on such advertisement, both of them are getting even more paid. So the issue here or let's say, the attack vector that, malicious attack malicious attacker can exploit is to both show, an advertisement and also try to, to collect the click from the from the user so that it can it can get paid.

So there are several, different frameworks that are available nowadays, Google, and several others. They are different according to, several features. First of all, the monetization, so how much the app developer is going to be paid, how much, it costs, for the for the brand that wants to publish the advertisements, or how much this service cost to the, possible advertiser, and also how, how often the advertisements are shown to the user when the user is executing an application. There are some, there are in addition, there are some, advertisement framework that can also somehow, customize the, advertisements according to the targeted user. So this is the context.

And when we usually when we speak about malware that rely on the advertisement framework frameworks, we have to speak about Adiware. So the purpose of Adiware is, basically to be very annoying in showing the advertisement studio because I as I said, the final aim is to show as much advertisements as possible and also to make you click on such advertisements so that it can be paid. So the advertisements are very aggressive, as shown in a very aggressive way. So you have a lot of notifications. You can have a pop up, so you can have a abstract banners and so forth.

You might have a pop that, comes from nowhere, and you cannot even understand if they are part of the application or not. You can even have sometimes advertisements to the when the screen is locked or, several other, ways. Generally speaking, the in this case, the victim is not, the user itself because the the user is kind of, exploited in order to get money. So the user doesn't have, doesn't have any impact from this kind of attack. But, of course, it can be he can get annoyed, and, eventually, this could lead towards the uninstallation of the app itself.

So, usually, when we talk about AdWords, we have to keep in mind that the attacker needs to find a sort of balance or trade off between the amount or how much aggressive are the techniques for showing the advertisements and, the, let's say, how much, he wants to stress the the victim itself. Because if, adding the data editing the application, the it means that the attacker has completely lost his own purpose. So he needs to find this kind of balance. Some examples of Adiware are the ones that are shown here. So, the ones that, for example, provide some, strange advertisements, like the one you can, provide here with some fake, exit buttons that eventually can, when clicked when clicked, can even, lead towards the installation of additional apps that you can find, on your own device in.

So as I said, the idea is to, force the victim to click on the specific advertisement. There were several examples, tons of examples of that have been developed over the past few years. And, each one of them tried to, get to get to get money out of the advertising framework in a different way. So one possible way is to somehow to emulate the user clicks. So the what was interesting at first, let's see.

One of the first examples of AdWords who were trying to emulate the user click event, the assumption or the designer exploit, the design, architecture that they exploited is that, when you have a library embedded in an application, of course, both the code that belongs to the app and the code that belongs to the library are executed within the same the sandbox. And, eventually, the library can, interact with the screen or the or with the foreground activity and, try to to emulate the user. So in the first examples of, the were able to emulate the user. And so from the, back end, there were some user clicks that were registered and that, at the end of the day, provided some money to the to the attacker or, basically, to the to the app developer. But, on the other side, this was after after several attempts, kind of discovered.

So, in this case, what happened? So the scenario was that, the application developer could, include these, emulation of the user click, or even the Adi framework could include some emulation of the user click. And both of them were paid. But on the other side, the advertiser was, a victim of this fraud and, could have been pointed out as, let's say, as a a bad negative reputation. So he gets scammed and loses trust, in the public, of course.

Another thing was that, as I said, over the after the previous attempts to try to emulate the user, some detection and some defense mechanisms were developed. So for example, even though at first those those, were successful, they, were detected afterwards, for example, by analyzing the, the traffic that was going out from the application or could distinguish between a real user and the enumerated one. And that could, eventually lead to to the detection of the of the ongoing attack. What happens in cybersecurity is always that, what what, of course, very often is that you have a kind of never ending race between the attacker and the and the, like, and the the defender. Because whenever the defender tries to propose a new defense mechanism, the attacker will always try to find some possible ways for, to bypass it.

So the first attempts to emulate the user click were successful. Then there was some, detection new detection mechanisms. And, again, the, there were some improvements on over the emulation of the user clicks so that at the end of the day, they were passed the existing mechanism. So nowadays, the, this kind of technique can even simulate the, user that fills a form of that watch a video. So they are much more, let's say, much more, they are designed much more in detail, and they are very, very closed in, their behavior to the, real one that the user might, might show.

So if you want to see, let's say or if you want to have some examples, you just have to link, to to click on the link that provides an ex a very example of a default that affected millions of users. And, the, the issue was that, they, in this case, they were able to, basically, to emulate the, traffic, and eventually get get money from, from these advertisement framework. Click Farms, were another, possible, option. I don't know if nowadays they are still, available or still running because they are very, very consuming in terms of, human beings that they require. So ClickFun basically relies on, real human being that are, kind of paid in order to click on the on the advertisements.

So there are a lot of low paid workers that are in, like, employed in order to click on ads and eventually, make both the ad developer and the developer, being paid. As I said, we're talking about humans. This happened over the past few years, but it's not that, let's say, it's not the first strategy that, of course, an attacker can rely on because it requires a lot of, people involved in the attack itself. Another possible strategy is to hide the advertisements. So, for example, they can be overlaid, so that you can have an advertisement that is displayed on top of the current activity, so in foreground, but in a hidden way so that the user doesn't really recognize that there is an overlay, activity on top of the foreground one.

And when the user click, thinks to click on the activity that he he sees, he, actually he's actually clicking on the one that is, in overlay. So, what is called the the strategy or the approach in this case is called AD stacking. So you place, one advertisement, the, let's say, the advertisement, the layer where the advertisement is shown on top of the 4 point 1, and the user doesn't see it, but it is, the event on the graphical user interface is detected and associated to the advertisement itself. Another approach could be the pixel stuffing, which means that you embed the advertisement in a very, in a just a single pixel, that, however, comes with the, foreground activity. So it means that it is, the so it is detected as, shown and displayed by the user and several other strategies.

And other, let's say, long story or significant, attack that has that was developed and that was, relying on the advertisement framework is the following one that affected a company, which basically was trying to get money from the installation procedure or from the installation chain within the application itself. Just to give you more details, the idea is that, in this case, the application developers were paid, whenever they were founded to be, to have encouraged the the back the the user to install a new application. So what happened was that, basically, with this app, they tried to, to get the so when say, when you install a new application, the Android OS triggers an event that advert that advertises to every other application installed, that a new one has been installed as well. And what they were trying, these attackers were trying to do was to to basically to try to simulate that their own application was the latest one opened before the installation of new app so that they could have been paid, for this new installation. So the mechanism is called installation referral.

So it means that, when you have an application that has been just installed, you this is the general procedure. When you have a new app installed, the OS reads or gets what was the latest device app or framework that, triggered the execution. And what this company was trying to do is basically trying to emulate this kind of procedure to to to trick this kind of procedure in order to be detected as the latest one and then as the latest application that was, opened by the user. And that, could have been eventually, classified as the responsible one for triggering the new installation of the app. So, step by step, the purpose of the attack was as follows.

So first of all, the Cheetah apps, because it it was, it involved a set of different applications. We're listening, for any new installation and for any installation of a new app. As soon as the app was downloaded on the device, the app was, trying to, said to to trick this mechanism concerned concerning the last click event. And the way, eventually, the final aim was to get money out of it. So, this happened even though the, of course, the the developers of Cheetah were not involved at all in the installation of the new app.

So what they actually did, they managed to, when whenever the app, listen for the installation of, they trigger the execution of such app without the user knowledge. And then they tried to emulate the, let's say, the procedure for receiving the the back bounty according to the user click events. So the, high effect that were coming from these apps when they were accused of this kind of of of attack, but at the end of the day, they were responsible for this, hardware procedure. Somehow, they were also accused of manipulating the SDK because, of course, as you might figure out, it's not that easy to, set up this kind of attack. But, they claim that that they were not involved at all in the manipulation of SDK or that they have no control over it even though it was hard to prove, the opposite.

Another example were the keyboard app, which was, in this case, trying to collect the all the, keyword interaction from the user with the, with the device itself in order to, somehow anticipate the installation of a new application on the device. And in this case, trying to, once again, to be rewarded as the application that was, triggering the execution the installation of a new application on the device itself. What happens to the Cheetah app, where they were actually effective, in the purpose because they were downloaded by 2,000,000,000 they they were triggering or they were involved, honestly, they were awarded, the installation of 2,000,000,000, apps, and they got, a lot of money. But, at the end of the day, they were detected. They were found as, let's say, responsible for this kind of attack, and, of course, they were, persecuted.

Another thing that we have to keep in mind is that, the Adi frameworks, the most, let's say, complex ones can even involve a sort of customization of the different other advertisements that are shown to the user. And, this is actually what happens, every day. So whenever you use a device, you search for for some information online or, you use the social network, all this kind of, information that you're looking for in the on the Internet are used for profiling the user. Profiling the user means that, companies such as Facebook, Google, and so forth try to collect as much as much information, as possible from you so that they can afterwards craft and customize the advertisements for you. So just as an example, if you search online for a specific type of shoes, Google will, Google that is offering a free service, which is the access to the Internet and the search engine will, save this information, will save this search, and afterwards might display, you might you might you might see some advertisements about the shoes, for example, on Facebook.

What happens when this, of course, is basically that Google has sold, the information about your research online to Facebook, which was able to craft and customize the advertisements that were shown, on your home page. This is actually the business model that is adopted by several companies. So, basically, whenever you have a service that is, that comes for that comes for free, you should think that, what is actually sold or taken from you is your interaction with the services, as well. So, if you rely, as I said, on a search engine such as Google or Facebook, social networks, or several others and you search for online information, all your searches will be somehow saved and shared with other chat or eventually sold to other companies so that, Google or the other ones that have collected such information can get paid. So this is, common procedure.

It is pretty, well known nowadays. We are definitely aware of that, but we are also keep, using, free services, even though they they say our privacy, our privacy is somehow affected by this business model. So, one issue or, let's say, one framework that comes, one approach that comes in this scenario about, like, trying to, perform a customized advertisement, a customized advertisement towards the victim, is the cross device tracking. So in this scenario, what happens is that, very often, the, users rely on different devices to access the information online. So they might use, for example, their laptop or their mobile devices.

And, it would be interesting and useful, of course, for some companies to somehow connect, the devices that belong to the same user so that if you search for something online from your laptop, then you might get a customized advertisement even on your mobile device. The methodology or the framework used for connecting the devices that belong to a single, user is called the cross device tracking. The idea is that is the following one. So as I said, the final aim is to, craft and customize the advertisements so that even though you access to, several devices, you will be recognized as the as the same user, and you will see which, and you will see basically customized and personal advertisements. So the idea, or the example is the following one.

So we can suppose that, for example, we have a user that show that sees, an advertisement about on her television. And, the mobile device that is that belongs to the same user detects that the Newsweek advertisement has been just shown on the on the television by the user. The, in this case, the assessment framework, that is embedded in mobile, in the mobile apps will, provide some Newsweek related advertisements whenever the user interacts with the apps with the apps themselves. Seems creepy, but it actually works through several different approaches. One way is, to rely on the different, services that are provided by a single, company.

So for example, if you, access to the same browser and you're logged in through Google, all these kind of, so if you search online for information on the on Google, on your laptop or on your mobile device and you are always connected through your own account, all this kind of information can be, of course, saved and associated to a single user. So this is kind of, easy. On the other side, there are there are even approaches that allow the companies to connect the devices that belong to different vendors. One possible approach that has been tested and that actually works is, what is called the ultrasound based across device tracking, which, basically works as follows. So, what, what this approach or methodology relies on is, the, let's say, the the connection of the different devices that belong to a single user by the interception of these ultrasound beacons that are transmitted by each single device.

So the idea is better shown in this, picture. So, basically, we have, once again, an application that is running on on the mobile device, and this application embeds, an ultrasound based across device tracking advertisement framework. We have a laptop, and we have a user that, for example, interacts with the laptop in order to search for some information online. So whenever this search research is performed, the laptop actually generates an ultrasound signal that can be an ultrasound signal that, embeds the information that that has been, searched online. And it can be, this can be retrieved or detected by the application, which, could, afterwards, customize the the advertisement shown to the to the user on the mobile device.

And at the end of the day, both in this case, both the device and the laptop both devices will be connected to a single user. And even though the physical user might actually be different, because we kind of assume that the of a laptop and of a mobile device can be a single person. But it might even happen that the person that that might be different people that are using the same devices. This is not actually significant. What happens is that, let's say, from the from the advertisement company, the final idea or purpose is to, as I said, is to customize the advertisement.

And one way is to generate these ultrasound events that, from 1 device, share information about the for example, about the searches that have been done online by the user, and, they can be detected by surrounding devices in the same place. Okay. So this, let's say, right now provides an overview about, all the possible examples. Let's say, not all the possible, but, a significant amount of examples of possible malware in the ecosystem, that can, as you might have noticed, rely on different ways for achieving different purposes. So they can be they can, spy on the on the victims in order to get sensitive information.

They can exploit these advertisement frameworks frameworks in order to get paid in order to to get paid. They can damage the the device by, for example, making it, unusable and so forth. Now, that we have maybe, I hope, a better idea about, how, which kind of malware we can find in the Android ecosystem, we, have to think about how the, actually, the malwares are able to reach the users. Let's say the very first the starting point is thinking about the location of the apps. So the majority of users download the applications from the Google Play Store, which is the official marketplace for the applications, but that is not the only one.

So there are also several other market place which are alternative to Google, to the Google Play Store, and which can also be used. For example, just to mention, use case scenario, in, in China, most of the Google services are banned. So the devices that do not come with the Google Play Store or with the default Google applications. And in that case, the users have to rely on a third party, app markets. In this case, or let's say in this lecture, we will discuss about which defense mechanisms are provided guaranteed by Google, when with respect to the Google Play to the Google Play Store.

So the Google Play Store, as I said, is, somehow the let's say this one of the central component of the business model of Android because it is open to everyone. So everyone can publish an application there. But on the other side, also, anyone can, install, such applications. So it is extremely important to guarantee a security, a secure ecosystem for the users so that even though anyone can become an an app an Android developer, Google can guarantee that there are no, say, that there are no, possible issues or threats, to which the users are exposed. So, for this reason, Google has been developing several mechanisms and procedures that, allow to analyze and automatically analyze an application whenever it is in, uploaded on, on the place.

So so what happens is that when you, upload an application on the place, so this, is going to be analyzed through a static and then and, a dynamic approach. And, eventually, if this, set, of analysis is successful, your application can be placed on the Play Store. Unfortunately, it happens that it happens that the malware are able to bypass such defense mechanisms. And, that's why we still have examples of malware that are removed from the pay store after the war. So that means that in that, specifically in that scenario, the, malware developers were able to bypass the countermeasure, so the defense mechanisms provided on the play store, and they managed to have their own application published.

Okay. So as I said, the set of analysis that is performed by Google is given by first a static analysis and then a dynamic one. Usually, in the static analysis, the purpose is to find for some specific malicious partners that are already well known. So for example, if we are talking about, well known malwares, we can say that there is a common database of signatures that uniquely identify such malware so that it is possible through just a static analysis to detect them. And afterwards, the Google Play Store performs a dynamic analysis, which, seems to be executed in an emulator.

Of course, we have already seen that there are several, ways for the malicious developers for bypass to bypass this kind of a defense. So for example, it, they can rely on the dynamic code loading so that they can load the malicious behavior, the malicious code afterwards, or they can just postpone the they can just postpone the execution of the malicious behavior, afterwards. Concern and this concerns the dynamic analysis. Concerning the static one, we can think about the code frustration as well as the, again, the dynamic code loading. So, let's say that, at the end of the day, even though Google places a lot of defense mechanisms and protections, this is always, let's say, a never ending story for, as I said, between defender and attacker.

So the attackers will always be able or will always try to achieve, and to bypass the defense mechanisms embedded. Another issue that comes, in this scenario is that Google can also can only control the Google Play Store. So as I said before, we can also have several other, third party or alternative, up markets. And in that case, Google doesn't have any kind of control on top of that. The applications, can be installed, of course, need to be installed manually.

And, let's say that this is the tricky part, of the the the the the the the measures developer has to rely on. So the issue is that, nowadays, it is not possible for an application to trigger the installation of another app without a user consent. So it is not possible for an application to download and install, another app on the user device without relying on his acknowledgment. So the bottleneck for this kind of attacks is that the attacker has to rely on some, approaches and strategies in order to lure the building to install an application. Of course, there are several ones which, somehow make this happen.

Some examples are social engineering, repackaging, and, what is called the turning bad the chart. So an application that at first was a benign one, and then it was found to be, malicious. So starting from the social engineering, this is, let's say, generally speaking, a technique that allows an attacker to, get information or to, for example, to bypass some controls so to get access to a building or, several other staff by interacting with the human itself, so by relying on, human feelings. In this case, the social engineering could lead to something that can convince the user to store an application. For example, it could be an application that is, very similar to an existing one and that confuses the user.

So the user that is distracted and doesn't, for example, notice the name of the developer, the name of the developer, or the number of downloads just sees the icon of a specific famous application and immediately downloads it. The, for example, the advertisements can, lead or can redirect the the user towards a wrong app, and maybe the user just clicks, everything without placing so much attention. And at the end of the day, it it installs an application, which is a malware. Or, another alternative way is to is to provide a free application, a free version of an application, which is instead, which instead requires a payment. Or it can, it can also let's say this kind of attack, it can also, of course, buy can also core by publishing an application that provides additional features with respect to the basic version of the app.

Just to give you an example, here, you can see that, we have a super famous puzzle game, which has been somehow, let's say, copy pasted and regenerated in several other applications. So it is likely that the first one is the official, but, what about the others? So the other also let's say, like, if you are if you pay enough attention, you might see that, there is a strange name, asset to the developer in the other applications. But maybe, as I said, it not all the Android users could be so so aware of the different information that they can find in the place, and they can eventually click on another app. The second approach is repackaging.

So repackaging means that you, take a famous application. You disassemble. You inject some code, and then you reassemble and publish with a different package name. Again, this is definitely doable from a technical point of view. And, of course, in this case, you need to, again, to lure the user.

This is the most common scenario for, for example, distributing an application that is free instead of the paid version or that comes from additional features instead of the, of the other one. And, of course, within the malicious application, there could be some, malicious with this repackage application, the malware can have embedded, for example, in malicious advertisement framework or, some code that still is sensitive data and so forth. The last possible option is an application that, as I said, at first, looks like a legitimate one, but only after being installed, it turns bad. And, in this scenario, what can happen is, for example, that the malicious application, downloads additional code at runtime, and it dynamically loads it afterwards. Or it can even happen that, for example, even the editor for the application itself is somehow buggy.

And this is something that, occurred, in the past. Or another example is that there is a change of ownership of the application. So, for example, at first, the app, was developed by a certain company, then, it was developed by a different one, by a different type that changed the internal logic. So getting back to the example of the malicious editor, this was a real, scenario that occurred, for the iOS ecosystem this time. So, basically, what happened is that the Xcode, code editor was embed was automatically injecting malicious code into the application.

So when developers used to develop an, an iOS app, the editor automatically put some malicious code in the app. And when it was distributed, it was it comes with the malicious code embedded inside it. This, of course, affected quite a significant amount of apps, and it was later on detected and, of course, fixed. Even if the attacker, let's say, somehow manages to install an application on the on the user device, of course, it has also, it has to face several, security checks and mechanisms that are providing on the device itself. And, let's say that installing is not the is just the the first step of this chain.

But at the end of the day, what the attacker has to to to do is to understand which are the vulnerabilities that, the vulnerabilities that he wants to exploit. So the security vulnerabilities are, basically the attack surface that the attacker relies on, in order to perform its own exploit and eventually manage to damage the victim. So it can just to give you an example, so it can bypass the permission check, or it might try to perform, to get, for example, root privileges or to perform a previous escalation attack or to execute some code, on the phone that was not part of that was or not on on the device before and so forth. So, the set of vulnerabilities, which, can be also defined as effects or faces, will be discussed in the next lecture.